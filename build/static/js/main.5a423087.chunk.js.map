{"version":3,"sources":["components/recipe.module.css","components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","img","ingredientSearch","ingredientMissed","className","style","recipe","image","src","alt","ingredient_title","ingredient","map","ingredients","original","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","split","join","url","process","useEffect","getRecipes","a","fetch","response","json","data","Paper","component","onSubmit","event","preventDefault","InputBase","type","value","onChange","target","placeholder","IconButton","index","key","id","usedIngredients","missedIngredients","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,iBAAmB,iCAAiC,WAAa,2BAA2B,iBAAmB,iCAAiC,iBAAmB,mC,oNCwBpOC,EApBA,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,iBAAkBC,EAAuB,EAAvBA,iBAE3C,OACI,yBAAKC,UAAWC,IAAMC,QACnB,4BAAKN,GACL,yBAAKI,UAAWC,IAAME,MAAOC,IAAKP,EAAKQ,IAAI,KAC3C,wBAAIL,UAAWC,IAAMK,kBAArB,eACA,yBAAKN,UAAWC,IAAMM,YACnB,wBAAIP,UAAWC,IAAMH,kBAAmBA,EAAiBU,KAAI,SAAAC,GAAW,OACpE,4BAAKA,EAAYC,cAErB,wBAAIV,UAAWC,IAAMF,kBAAmBA,EAAiBS,KAAI,SAAAC,GAAW,OACpE,4BAAKA,EAAYC,iB,iDC0DpBC,EArEH,WAEV,IAFgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,IANnB,mBAMTK,EANS,KAMFC,EANE,KAQVT,EAAcQ,EAAME,MAAM,KAAKC,KAAK,KAEpCC,EAAG,uEARMC,mCAQN,iCAAkGb,GAE3Gc,qBAAU,WACRC,MACA,CAACP,IAEH,IAAMO,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAML,GADZ,cACXM,EADW,gBAEGA,EAASC,OAFZ,OAEXC,EAFW,OAGjBf,EAAWe,GAHM,2CAAH,qDAehB,OACE,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,cAAcI,IAAI,oBAAoBC,IAAI,SACzD,8CAGA,kBAACyB,EAAA,EAAD,CAAOC,UAAU,OAAO/B,UAAU,cAAcgC,SAblC,SAAAC,GAChBA,EAAMC,iBACNhB,EAASH,GACTC,EAAU,MAWN,kBAACmB,EAAA,EAAD,CACEnC,UAAU,aACVoC,KAAK,OACLC,MAAOtB,EACPuB,SArBa,SAAAL,GACrBjB,EAAUiB,EAAMM,OAAOF,QAqBfG,YAAY,oBAEd,kBAACC,EAAA,EAAD,CACAzC,UAAU,gBACVoC,KAAK,UACL,kBAAC,IAAD,QAIF,yBAAKpC,UAAU,WACda,EAAQL,KAAI,SAACN,EAAQwC,GAAT,OACX,kBAAC,EAAD,CACAC,IAAKD,EACLE,GAAIF,EACJ9C,MAAOM,EAAON,MACdC,IAAKK,EAAOC,MACZL,iBAAkBI,EAAO2C,gBACzB9C,iBAAkBG,EAAO4C,0BCvDbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a423087.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1IG3a\",\"image\":\"recipe_image__234HM\",\"ingredient_title\":\"recipe_ingredient_title__3XH8c\",\"ingredient\":\"recipe_ingredient__3aqEt\",\"ingredientSearch\":\"recipe_ingredientSearch__3Nb45\",\"ingredientMissed\":\"recipe_ingredientMissed__3yzAw\"};","import React from \"react\"\nimport style from \"./recipe.module.css\";\n\n\n\nconst Recipe = ({title, img, ingredientSearch, ingredientMissed }) => {\n\n    return (\n        <div className={style.recipe}> \n           <h3>{title}</h3>\n           <img className={style.image} src={img} alt=\"\" /> \n           <h4 className={style.ingredient_title}>Ingredients</h4>\n           <div className={style.ingredient}>\n              <ul className={style.ingredientSearch}>{ingredientSearch.map(ingredients =>(\n                  <li>{ingredients.original}</li>\n              ))}</ul>\n              <ul className={style.ingredientMissed}>{ingredientMissed.map(ingredients =>(\n                  <li>{ingredients.original}</li>\n              ))}</ul>\n           </div>\n        </div>\n    )\n}\n\n\nexport default Recipe;","import React, { useState, useEffect } from 'react';\nimport Recipe from \"./components/Recipe\";\nimport './App.css';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { InputBase, IconButton, Paper } from '@material-ui/core';\n\nconst App = () => {\n\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  const ingredients = query.split(\" \").join(\",\"); \n  \n  const url = `https://api.spoonacular.com/recipes/findByIngredients?apiKey=${apiKey}&number=6&ingredients=${ingredients}`\n \n  useEffect(() => {\n    getRecipes();\n  },[query])\n\n  const getRecipes = async () => {\n    const response = await fetch(url);\n    const data = await  response.json() \n    setRecipes(data);\n   } \n\n  const updateSearch = event => {\n  setSearch(event.target.value)  \n  };\n  const getSearch = event => {\n    event.preventDefault();\n    setQuery(search)\n    setSearch(\"\")\n  }\n \n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n      <img className=\"logo-header\" src=\"./images/logo.svg\" alt=\"logo\"/>\n      <h1>Recipe Finder</h1>     \n      </div>\n    \n      <Paper component=\"form\" className=\"search-form\" onSubmit={getSearch}>  \n        <InputBase \n          className=\"search-bar\" \n          type=\"text\" \n          value={search} \n          onChange={updateSearch} \n          placeholder=\"Find a recipe..\"\n        />\n        <IconButton \n        className=\"search-button\" \n        type=\"submit\">\n        <SearchIcon  />\n        </IconButton>\n           \n      </Paper>\n      <div className=\"recipes\">\n      {recipes.map((recipe, index) => (\n        <Recipe\n        key={index}\n        id={index}\n        title={recipe.title}\n        img={recipe.image}\n        ingredientSearch={recipe.usedIngredients}\n        ingredientMissed={recipe.missedIngredients}\n          />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}